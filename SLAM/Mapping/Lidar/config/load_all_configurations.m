function config = load_all_configurations()
%LOAD_ALL_CONFIGURATIONS Î™®Îì† ÏÑ§Ï†ï ÌååÏùºÏùÑ Î°úÎìúÌïòÍ≥† ÌÜµÌï©
%
% Returns:
%   config - ÌÜµÌï©Îêú ÏÑ§Ï†ï Íµ¨Ï°∞Ï≤¥
%
% Í∏∞Îä•:
%   - Î™®Îì† ÏÑ§Ï†ï ÌååÏùºÏùÑ Ï§ëÏïôÏóêÏÑú Î°úÎìú
%   - ÏÑ§Ï†ï Í≤ÄÏ¶ù Î∞è Í∏∞Î≥∏Í∞í ÏÑ§Ï†ï
%   - ÏÑ±Îä• ÏµúÏ†ÅÌôî Ï†ÅÏö©

% ========== ÏÑ§Ï†ï ÌååÏùº Î°úÎìú ==========
try
    config.environment = environment_config();
    config.buildings = building_config();
    config.trajectory = trajectory_config();
    config.performance = performance_config();
    config.sensor = sensor_config(); % LiDAR ÏÑºÏÑú ÏÑ§Ï†ï Ï∂îÍ∞Ä
    config.simulation = simulation_config();
    
    % Debug ÏÑ§Ï†ïÏùÑ performanceÏóêÏÑú ÏÉÅÏúÑ Î†àÎ≤®Î°ú Ïù¥Îèô (Ï†ëÍ∑ºÏÑ± Ìñ•ÏÉÅ)
    config.debug = config.performance.debug;
    
    % ========== Î°úÎìú ÏôÑÎ£å Î©îÏãúÏßÄ ==========
    fprintf('‚úÖ All configuration files loaded successfully.\n');
    
catch ME
    fprintf('‚ùå Failed to load configuration: %s\n', ME.message);
    error('Configuration loading failed');
end

% ========== ÏÑ§Ï†ï Í≤ÄÏ¶ù ==========
validate_configurations(config);

% ========== Îü∞ÌÉÄÏûÑ ÏµúÏ†ÅÌôî ÏÑ§Ï†ï Ï†ÅÏö© ==========
if config.performance.profiling.enabled
    fprintf('üìä Profiling is enabled.\n');
end

if config.performance.memory.preallocation
    fprintf('üöÄ Memory preallocation optimization is enabled.\n');
end

end

function validate_configurations(config)
%VALIDATE_CONFIGURATIONS ÏÑ§Ï†ï Í∞í Í≤ÄÏ¶ù
%
% Parameters:
%   config - Í≤ÄÏ¶ùÌï† ÏÑ§Ï†ï Íµ¨Ï°∞Ï≤¥

% ÏãúÎÆ¨Î†àÏù¥ÏÖò ÏãúÍ∞Ñ Í≤ÄÏ¶ù
assert(config.environment.simulation.time > 0, ...
    'Simulation time must be greater than 0.');

% Í≥†ÎèÑ ÏÑ§Ï†ï Í≤ÄÏ¶ù
assert(all(config.trajectory.spiral.altitudes > 0), ...
    'All flight altitudes must be greater than 0.');

% ÎπåÎî© Ïàò Í≤ÄÏ¶ù
total_buildings = length(config.buildings.zone1.buildings) + ...
                 length(config.buildings.zone2.buildings) + ...
                 length(config.buildings.zone3.buildings) + ...
                 length(config.buildings.zone4.buildings);
                 
assert(total_buildings == 12, ...
    'A total of 12 buildings must be configured. Current: %d', total_buildings);

% Sensor ÏÑ§Ï†ï Í≤ÄÏ¶ù
    if ~isfield(config, 'sensor') || ~isfield(config.sensor, 'lidar')
        error('Sensor configuration is missing or incomplete');
    end
    requiredFields = {'maxRange', 'resolution', 'enabled'};
    for i = 1:length(requiredFields)
        if ~isfield(config.sensor.lidar, requiredFields{i})
            error('Required LiDAR field missing: %s', requiredFields{i});
        end
    end
    fprintf('‚úÖ Sensor configuration validated successfully.\n');

% Simulation ÏÑ§Ï†ï Í≤ÄÏ¶ù
    if ~isfield(config, 'simulation')
        error('Simulation configuration is missing');
    end
    requiredSimFields = {'map3D', 'realtime', 'logging'};
    for i = 1:length(requiredSimFields)
        if ~isfield(config.simulation, requiredSimFields{i})
            error('Required simulation field missing: %s', requiredSimFields{i});
        end
    end
    fprintf('‚úÖ Simulation configuration validated successfully.\n');

fprintf('‚úÖ All configuration validations completed successfully.\n');

end
